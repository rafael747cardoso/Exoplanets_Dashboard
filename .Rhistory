grepl(x = df_miss$var_name, pattern = "peri") %>% sum()
df_miss$var_name
df_miss$var_name
df_miss$var_name = as.character(df_miss$var_name)
df_miss$var_name
grepl(x = df_miss$var_name, pattern = "peri") %>% sum()
grepl(x = df_miss$var_name, pattern = "albe") %>% sum()
df_plot = df_exoplant_eu[, df_miss$var_name]
dim(df_plot)
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
dim(df_plot)
names(df_plot)
names(df_plot) %>% sort()
dim(df_plot)
# Correlation:
df_plot = df_plot %>%
tidyr::drop_na()
dim(df_plot)
df_miss = missing_analysis(df_exoplant_eu) %>%
dplyr::filter(non_na_pct > 10)
df_miss$var_name = as.character(df_miss$var_name)
df_plot = df_exoplant_eu[, df_miss$var_name]
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
dim(df_plot)
missmap(df_plot)
# Correlation:
df_plot = (df_plot %>%
as.matrix() %>%
rcorr(type = "pearson"))$r
df_plot
dim(df_plot)
# Remove the columns with too little data:
df_miss = missing_analysis(df_exoplant_eu) %>%
dplyr::filter(non_na_pct > 10)
df_miss$var_name = as.character(df_miss$var_name)
df_plot = df_exoplant_eu[, df_miss$var_name]
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
dim(df_plot)
# Correlation:
df_plot = (df_plot %>%
as.matrix() %>%
rcorr(type = "pearson"))$r
df_plot
df_plot = melt(data = df_plot,
value.name = "Vars_corr")
class(df_plot)
install.packages("reshape2")
# Packages:
packages = c(
"shiny",
"shinydashboard",
"shinyWidgets",
"shinycssloaders",
"dplyr",
"plotly",
"DT",
"stringr",
"moments",
"Hmisc",
"reshape2"
)
if(app_dev == TRUE){
for(pckg in packages){
library(package = pckg,
character.only = TRUE,
lib.loc = path_lib)
}
} else{
for(pckg in packages){
require(package = pckg,
character.only = TRUE)
}
}
# Remove the columns with too little data:
df_miss = missing_analysis(df_exoplant_eu) %>%
dplyr::filter(non_na_pct > 10)
df_miss$var_name = as.character(df_miss$var_name)
df_plot = df_exoplant_eu[, df_miss$var_name]
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
# Correlation:
df_plot = (df_plot %>%
as.matrix() %>%
rcorr(type = "pearson"))$r
df_plot = melt(data = df_plot,
value.name = "Vars_corr")
df_plot
dim(df_plot)
class(df_plot)
View(df_plot)
df = df_plot
head(df)
plot_ly(
data = df,
x = ~Var1,
y = ~Var2,
z = ~Vars_corr,
type = "heatmap",
colors = my_palette,
colorbar = list(
title = "<b>Pearson correlation</b>",
len = 1
),
hovertemplate = paste0("<b>",
"%{x}<br>",
"%{y}<br>",
"Correlation: %{z:}</b><extra></extra>")
) %>%
layout(
height = 900,
width = 1200,
xaxis = list(
title = "",
tickfont = list(
size = 18
),
categoryorder = "array",
color = "white",
gridcolor = "rgba(0, 0, 0, 0)"
),
yaxis = list(
title = "",
tickfont = list(
size = 18
),
color = "white",
gridcolor = "rgba(0, 0, 0, 0)"
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
plot_bgcolor = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)"
)
my_palette = c("#000000", "#E008F8", "#F81D08", "#F88A08", "#F7FE04")
plot_ly(
data = df,
x = ~Var1,
y = ~Var2,
z = ~Vars_corr,
type = "heatmap",
colors = my_palette,
colorbar = list(
title = "<b>Pearson correlation</b>",
len = 1
),
hovertemplate = paste0("<b>",
"%{x}<br>",
"%{y}<br>",
"Correlation: %{z:}</b><extra></extra>")
) %>%
layout(
height = 900,
width = 1200,
xaxis = list(
title = "",
tickfont = list(
size = 18
),
categoryorder = "array",
color = "white",
gridcolor = "rgba(0, 0, 0, 0)"
),
yaxis = list(
title = "",
tickfont = list(
size = 18
),
color = "white",
gridcolor = "rgba(0, 0, 0, 0)"
),
margin = list(
l = 10,
r = 10,
t = 10,
b = 10
),
hoverlabel = list(
font = list(
size = 18
)
),
plot_bgcolor = "rgba(0, 0, 0, 0)",
paper_bgcolor = "rgba(0, 0, 0, 0)"
)
runApp()
# Dev or prod mode (deploy):
app_dev = TRUE
# Paths:
path_funcs = "funcs/"
path_data = "data/"
path_style = "www/"
path_lib = "renv/library/R-4.1/x86_64-pc-linux-gnu/"
# Packages:
packages = c(
"shiny",
"shinydashboard",
"shinyWidgets",
"shinycssloaders",
"dplyr",
"plotly",
"DT",
"stringr",
"moments",
"Hmisc",
"reshape2"
)
if(app_dev == TRUE){
for(pckg in packages){
library(package = pckg,
character.only = TRUE,
lib.loc = path_lib)
}
} else{
for(pckg in packages){
require(package = pckg,
character.only = TRUE)
}
}
# Functions:
source(paste0(path_funcs, "ui_tab_exoplanet_eu.R"))
source(paste0(path_funcs, "ui_tab_exoplanet_nasa.R"))
source(paste0(path_funcs, "has_few_levels.R"))
source(paste0(path_funcs, "missing_analysis.R"))
source(paste0(path_funcs, "plot_missing_values.R"))
source(paste0(path_funcs, "plot_histogram.R"))
source(paste0(path_funcs, "plot_2d_density.R"))
source(paste0(path_funcs, "plot_scatter.R"))
source(paste0(path_funcs, "plot_bubble.R"))
source(paste0(path_funcs, "plot_violin.R"))
source(paste0(path_funcs, "plot_barplot.R"))
source(paste0(path_funcs, "plot_corrmatrix.R"))
# Global options:
options(spinner.color = "#0dc5c1")
options(spinner.type = 4)
sidebar_width = 250
set.seed(666)
# Theme:
color1 = "#282B33"
color2 = "#384875"
color3 = "#0B297B"
##################################################### Data ############################################################
# The Extrasolar Planets Encyclopaedia:
df_exoplant_eu = readRDS(paste0(path_data, "df_exoplanet_eu.rds"))
list_names_eu = readRDS(paste0(path_data, "list_names_eu.rds"))
# NASA Exoplanet Archive:
df_exoplant_nasa = readRDS(paste0(path_data, "df_exoplanet_nasa.rds"))
list_names_nasa = readRDS(paste0(path_data, "list_names_nasa.rds"))
### Options for the selects
# Numeric variables:
num_vars_eu = df_exoplant_eu %>%
dplyr::select_if(is.numeric) %>%
names()
list_opts_exoplanet_eu_num_var = list_names_eu[num_vars_eu]
opts_exoplanet_eu_num_var = unlist(unname(list_opts_exoplanet_eu_num_var))
# Categoric variables with few levels and numeric variables:
nice_cat_var_eu = df_exoplant_eu %>%
dplyr::select_if(is.character) %>%
dplyr::select_if(has_few_levels) %>%
names()
list_opts_exoplanet_eu_num_nicecat_var = list_names_eu[c(num_vars_eu, nice_cat_var_eu)]
opts_exoplanet_eu_color_var = unlist(unname(list_opts_exoplanet_eu_num_nicecat_var))
# Categoric variables with few levels:
cat_var_eu = df_exoplant_eu %>%
dplyr::select_if(is.character) %>%
dplyr::select_if(has_few_levels) %>%
names()
cat_var_eu = cat_var_eu[which(!(cat_var_eu %in% c("planet_status", "star_magnetic_field")))] # too few data
list_opts_exoplanet_eu_cat_var = list_names_eu[cat_var_eu]
opts_exoplanet_eu_cat_var = unlist(unname(list_opts_exoplanet_eu_cat_var))
# Remove the columns with too little data:
df_miss = missing_analysis(df_exoplant_eu) %>%
dplyr::filter(non_na_pct > 10)
df_miss$var_name = as.character(df_miss$var_name)
df_plot = df_exoplant_eu[, df_miss$var_name]
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
# Correlation:
df_plot = (df_plot %>%
as.matrix() %>%
Hmisc::rcorr(type = "pearson"))$r
df_plot = reshape2::melt(data = df_plot,
value.name = "Vars_corr")
df_plot
# Remove the columns with too little data:
df_miss = missing_analysis(df_exoplant_eu) %>%
dplyr::filter(non_na_pct > 10)
df_miss$var_name = as.character(df_miss$var_name)
df_plot = df_exoplant_eu[, df_miss$var_name]
# Take only the numeric columns:
num_vars = df_plot %>%
dplyr::select_if(is.numeric) %>%
names()
df_plot = df_plot[, num_vars]
list_vars = list_names_eu[num_vars]
names(df_plot) = unlist(unname(list_vars))
df_plot
dim(df_plot)
# Correlation:
df_plot = (df_plot %>%
as.matrix() %>%
Hmisc::rcorr(type = "pearson"))$r
df_plot = reshape2::melt(data = df_plot,
value.name = "Vars_corr")
plot_corrmatrix(df = df_plot)
shiny::runApp()
runApp()
# Dev or prod mode (deploy):
app_dev = TRUE
# Paths:
path_funcs = "funcs/"
path_data = "data/"
path_style = "www/"
path_lib = "renv/library/R-4.1/x86_64-pc-linux-gnu/"
# Packages:
packages = c(
"shiny",
"shinydashboard",
"shinyWidgets",
"shinycssloaders",
"dplyr",
"plotly",
"DT",
"stringr",
"moments",
"Hmisc",
"reshape2"
)
if(app_dev == TRUE){
for(pckg in packages){
library(package = pckg,
character.only = TRUE,
lib.loc = path_lib)
}
} else{
for(pckg in packages){
require(package = pckg,
character.only = TRUE)
}
}
# Functions:
source(paste0(path_funcs, "ui_tab_exoplanet_eu.R"))
source(paste0(path_funcs, "ui_tab_exoplanet_nasa.R"))
source(paste0(path_funcs, "has_few_levels.R"))
source(paste0(path_funcs, "missing_analysis.R"))
source(paste0(path_funcs, "plot_missing_values.R"))
source(paste0(path_funcs, "plot_histogram.R"))
source(paste0(path_funcs, "plot_2d_density.R"))
source(paste0(path_funcs, "plot_scatter.R"))
source(paste0(path_funcs, "plot_bubble.R"))
source(paste0(path_funcs, "plot_violin.R"))
source(paste0(path_funcs, "plot_barplot.R"))
source(paste0(path_funcs, "plot_corrmatrix.R"))
# Global options:
options(spinner.color = "#0dc5c1")
options(spinner.type = 4)
sidebar_width = 250
set.seed(666)
# Theme:
color1 = "#282B33"
color2 = "#384875"
color3 = "#0B297B"
##################################################### Data ############################################################
# The Extrasolar Planets Encyclopaedia:
df_exoplant_eu = readRDS(paste0(path_data, "df_exoplanet_eu.rds"))
list_names_eu = readRDS(paste0(path_data, "list_names_eu.rds"))
# NASA Exoplanet Archive:
df_exoplant_nasa = readRDS(paste0(path_data, "df_exoplanet_nasa.rds"))
list_names_nasa = readRDS(paste0(path_data, "list_names_nasa.rds"))
### Options for the selects
# Numeric variables:
num_vars_eu = df_exoplant_eu %>%
dplyr::select_if(is.numeric) %>%
names()
list_opts_exoplanet_eu_num_var = list_names_eu[num_vars_eu]
opts_exoplanet_eu_num_var = unlist(unname(list_opts_exoplanet_eu_num_var))
# Categoric variables with few levels and numeric variables:
nice_cat_var_eu = df_exoplant_eu %>%
dplyr::select_if(is.character) %>%
dplyr::select_if(has_few_levels) %>%
names()
list_opts_exoplanet_eu_num_nicecat_var = list_names_eu[c(num_vars_eu, nice_cat_var_eu)]
opts_exoplanet_eu_color_var = unlist(unname(list_opts_exoplanet_eu_num_nicecat_var))
# Categoric variables with few levels:
cat_var_eu = df_exoplant_eu %>%
dplyr::select_if(is.character) %>%
dplyr::select_if(has_few_levels) %>%
names()
cat_var_eu = cat_var_eu[which(!(cat_var_eu %in% c("planet_status", "star_magnetic_field")))] # too few data
list_opts_exoplanet_eu_cat_var = list_names_eu[cat_var_eu]
opts_exoplanet_eu_cat_var = unlist(unname(list_opts_exoplanet_eu_cat_var))
# Test:
input = list()
input$exoplanet_eu_histogram_xvar = "Planet mass (Jupiter mass)"
input$exoplanet_eu_histogram_bins = 100
input$exoplanet_eu_histogram_range = c(0, 135.3)
input$exoplanet_eu_2d_density_xvar = "Planet mass (Jupiter mass)"
input$exoplanet_eu_2d_density_yvar = "Planet radius (Jupiter radius)"
input$exoplanet_eu_2d_density_xbins = 100
input$exoplanet_eu_2d_density_ybins = 100
input$exoplanet_eu_scatter_xvar = "Planet mass (Jupiter mass)"
input$exoplanet_eu_scatter_yvar = "Planet radius (Jupiter radius)"
input$exoplanet_eu_bubble_xvar = "Orbit semi-major axis (AU)"
input$exoplanet_eu_bubble_yvar = "Orbit eccentricity"
input$exoplanet_eu_bubble_sizevar = "Planet radius (Jupiter radius)"
input$exoplanet_eu_bubble_colorvar = "Detection method"
input$exoplanet_eu_violin_xvar = "Publication status"
input$exoplanet_eu_violin_yvar = "Planet mass (Jupiter mass)"
input$exoplanet_eu_violin_scale = "Linear"
input$exoplanet_eu_barplot_xvar = "Detection method"
head(df_exoplant_eu)
runApp()
runApp()
head(df_exoplant_eu)
runApp()
DT::renderDataTable(
df,
options = list(
scrollX = TRUE
)
)
head(df)
df = df_exoplant_eu[, c(1:20)]
head(df)
names(df)
list_names_eu[names(df)]
unlist(unname(list_names_eu[names(df)]))
runApp()
# All variables
unlist(unname(list_names_eu[names(df_exoplant_eu)]))
# All variables
opts_exoplanet_eu_all_vars = unlist(unname(list_names_eu[names(df_exoplant_eu)]))
opts_exoplanet_eu_all_vars
opts_exoplanet_eu_all_vars[1]
# input$exoplanet_eu_scatter_xvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_scatter_yvar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_xvar = "Orbit semi-major axis (AU)"
# input$exoplanet_eu_bubble_yvar = "Orbit eccentricity"
# input$exoplanet_eu_bubble_sizevar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_colorvar = "Detection method"
# input$exoplanet_eu_violin_xvar = "Publication status"
# input$exoplanet_eu_violin_yvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_violin_scale = "Linear"
# input$exoplanet_eu_barplot_xvar = "Detection method"
input$exoplanet_eu_table_vars = c("Planet name")
input
table_vars = input$exoplanet_eu_table_vars
table_vars
df = df_exoplant_eu[, table_vars]
opts_exoplanet_eu_all_vars[1:2]
# input$exoplanet_eu_scatter_xvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_scatter_yvar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_xvar = "Orbit semi-major axis (AU)"
# input$exoplanet_eu_bubble_yvar = "Orbit eccentricity"
# input$exoplanet_eu_bubble_sizevar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_colorvar = "Detection method"
# input$exoplanet_eu_violin_xvar = "Publication status"
# input$exoplanet_eu_violin_yvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_violin_scale = "Linear"
# input$exoplanet_eu_barplot_xvar = "Detection method"
input$exoplanet_eu_table_vars = c("Planet name", "Planet status")
input
table_vars = input$exoplanet_eu_table_vars
df = df_exoplant_eu[, table_vars]
table_vars
df = df_exoplant_eu %>%
dplyr::select(all_of(table_vars))
opts_exoplanet_eu_all_vars
names(df) = opts_exoplanet_eu_all_vars
df = df_exoplant_eu
names(df) = opts_exoplanet_eu_all_vars
df
table_vars = input$exoplanet_eu_table_vars
table_vars
df = df_exoplant_eu[, table_vars]
table_vars
