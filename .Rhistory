colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
opts_exoplanet_eu_color_var
# input$exoplanet_eu_histogram_range = c(0, 135.3)
# input$exoplanet_eu_2d_density_xvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_2d_density_yvar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_2d_density_xbins = 100
# input$exoplanet_eu_2d_density_ybins = 100
# input$exoplanet_eu_scatter_xvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_scatter_yvar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_xvar = "Planet mass (Jupiter mass)"
# input$exoplanet_eu_bubble_yvar = "Planet radius (Jupiter radius)"
# input$exoplanet_eu_bubble_sizevar = "Orbit semi-major axis (AU)"
input$exoplanet_eu_bubble_colorvar = "Angular distance (arcsec)"
c_var_name = input$exoplanet_eu_bubble_colorvar
c_var = list_opts_exoplanet_eu_num_nicechar_var[which(list_opts_exoplanet_eu_num_nicechar_var == c_var_name)] %>%
names()
c_var
p = plot_ly()
is.character(df[, c_var])
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
# color = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
opacity = 0.7,
color = ~eval(parse(text = c_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
input
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
# color = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
opacity = 0.7,
color = ~log(eval(parse(text = c_var))),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
my_palette
# Case of numeric c_var:
my_palette = c( "#F81D08", "#F88A08", "#F7FE04")
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
# color = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
opacity = 0.7,
color = ~log(eval(parse(text = c_var))),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
opacity = 0.7,
color = ~log(eval(parse(text = c_var))),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
# opacity = 0.7,
color = ~log(eval(parse(text = c_var))),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
# opacity = 0.7,
color = ~eval(parse(text = s_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
# opacity = 0.7,
color = ~eval(parse(text = x_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
x_var
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
# opacity = 0.7,
color = ~eval(parse(text = y_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
y_var
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
size = ~eval(parse(text = s_var)),
color = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
sizemode = "diameter",
# opacity = 0.7,
color = ~eval(parse(text = y_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
sizes = c(5, 30),
marker = list(
size = ~eval(parse(text = s_var)),
sizemode = "diameter",
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
marker = list(
sizes = c(5, 30),
size = ~eval(parse(text = s_var)),
sizemode = "diameter",
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colorscale = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
size = ~eval(parse(text = s_var)),
marker = list(
sizes = c(5, 30),
sizemode = "diameter",
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
marker = list(
sizes = c(5, 30),
size = ~eval(parse(text = s_var)),
sizemode = "diameter",
sizeref = 0.1,
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
marker = list(
sizes = c(5, 30),
size = ~eval(parse(text = s_var)),
sizemode = "diameter",
sizeref = 0.001,
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
# Case of numeric c_var:
my_palette = c("#E008F8", "#F81D08", "#F88A08", "#F7FE04")
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
marker = list(
sizes = c(5, 30),
size = ~eval(parse(text = s_var)),
sizemode = "diameter",
sizeref = 100,
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
p = plot_ly()
p = p %>%
add_trace(
data = df,
x = ~eval(parse(text = x_var)),
y = ~eval(parse(text = y_var)),
text = ~eval(parse(text = c_var)),
type = "scatter",
mode = "markers",
marker = list(
sizes = c(5, 30),
size = ~eval(parse(text = s_var)),
sizemode = "area",
sizeref = 100,
opacity = 0.7,
color = ~eval(parse(text = y_var)),
colors = my_palette,
colorbar = list(
title = paste0("<b>", c_var_name, "</b>"),
len = 1
)
),
customdata = ~eval(parse(text = s_var)),
hovertemplate = paste0("<b>", x_var_name, ": %{x}<br>",
y_var_name, ": %{y}<br>",
c_var_name, ": %{text}<br>",
s_var_name, ": %{customdata}</b><extra></extra>")
)
p
x_var
y_var
